// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autoscrapper/v1/autoscrapper.proto

package autoscrapperv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/diegoafg1009/auto-radar-scraping-microservice/pkg/genproto/autoscrapper/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AutoScrapperServiceName is the fully-qualified name of the AutoScrapperService service.
	AutoScrapperServiceName = "autoscrapper.v1.AutoScrapperService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AutoScrapperServiceFindByFilterProcedure is the fully-qualified name of the AutoScrapperService's
	// FindByFilter RPC.
	AutoScrapperServiceFindByFilterProcedure = "/autoscrapper.v1.AutoScrapperService/FindByFilter"
)

// AutoScrapperServiceClient is a client for the autoscrapper.v1.AutoScrapperService service.
type AutoScrapperServiceClient interface {
	FindByFilter(context.Context, *connect.Request[v1.FindByFilterRequest]) (*connect.Response[v1.FindByFilterResponse], error)
}

// NewAutoScrapperServiceClient constructs a client for the autoscrapper.v1.AutoScrapperService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAutoScrapperServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AutoScrapperServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	autoScrapperServiceMethods := v1.File_autoscrapper_v1_autoscrapper_proto.Services().ByName("AutoScrapperService").Methods()
	return &autoScrapperServiceClient{
		findByFilter: connect.NewClient[v1.FindByFilterRequest, v1.FindByFilterResponse](
			httpClient,
			baseURL+AutoScrapperServiceFindByFilterProcedure,
			connect.WithSchema(autoScrapperServiceMethods.ByName("FindByFilter")),
			connect.WithClientOptions(opts...),
		),
	}
}

// autoScrapperServiceClient implements AutoScrapperServiceClient.
type autoScrapperServiceClient struct {
	findByFilter *connect.Client[v1.FindByFilterRequest, v1.FindByFilterResponse]
}

// FindByFilter calls autoscrapper.v1.AutoScrapperService.FindByFilter.
func (c *autoScrapperServiceClient) FindByFilter(ctx context.Context, req *connect.Request[v1.FindByFilterRequest]) (*connect.Response[v1.FindByFilterResponse], error) {
	return c.findByFilter.CallUnary(ctx, req)
}

// AutoScrapperServiceHandler is an implementation of the autoscrapper.v1.AutoScrapperService
// service.
type AutoScrapperServiceHandler interface {
	FindByFilter(context.Context, *connect.Request[v1.FindByFilterRequest]) (*connect.Response[v1.FindByFilterResponse], error)
}

// NewAutoScrapperServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAutoScrapperServiceHandler(svc AutoScrapperServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	autoScrapperServiceMethods := v1.File_autoscrapper_v1_autoscrapper_proto.Services().ByName("AutoScrapperService").Methods()
	autoScrapperServiceFindByFilterHandler := connect.NewUnaryHandler(
		AutoScrapperServiceFindByFilterProcedure,
		svc.FindByFilter,
		connect.WithSchema(autoScrapperServiceMethods.ByName("FindByFilter")),
		connect.WithHandlerOptions(opts...),
	)
	return "/autoscrapper.v1.AutoScrapperService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AutoScrapperServiceFindByFilterProcedure:
			autoScrapperServiceFindByFilterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAutoScrapperServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAutoScrapperServiceHandler struct{}

func (UnimplementedAutoScrapperServiceHandler) FindByFilter(context.Context, *connect.Request[v1.FindByFilterRequest]) (*connect.Response[v1.FindByFilterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autoscrapper.v1.AutoScrapperService.FindByFilter is not implemented"))
}
